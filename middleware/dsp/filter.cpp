#include "dsp/filter.hpp"

constexpr std::array<double, 31> lp_b{
        -0.02116143477456, 0.003713943557878, 0.006486822815972,  0.01104542652924,
        0.01725733772768,  0.02490351554676,  0.03375572555256,  0.04344681089898,
        0.05360234899511,  0.06376085615856,   0.0734386623807,  0.08219649473202,
        0.08952399322347,  0.09505942784682,  0.09852723001524,  0.09968872619232,
        0.09852723001524,  0.09505942784682,  0.08952399322347,  0.08219649473202,
        0.0734386623807,  0.06376085615856,  0.05360234899511,  0.04344681089898,
        0.03375572555256,  0.02490351554676,  0.01725733772768,  0.01104542652924,
        0.006486822815972, 0.003713943557878, -0.02116143477456
};

constexpr std::array<double, 35> t0d_b{
        -1.097288994074e-07,-4.22048028386e-07,-2.383598453726e-21,5.466384948953e-06,
        1.383289118805e-05,-1.704196691594e-20,-5.735603813223e-05,-9.448074481972e-05,
        -2.057261719029e-19,9.843739431684e-05,-0.0001559155381798,3.251554976853e-19,
        0.004759404902309,  0.02179095156287,  0.05679122215438,   0.1050535812014,
        0.1488357287302,   0.1666666671667,   0.1488357287302,   0.1050535812014,
        0.05679122215438,  0.02179095156287, 0.004759404902309,3.251554976853e-19,
        -0.0001559155381798,9.843739431684e-05,-2.057261719029e-19,-9.448074481972e-05,
        -5.735603813223e-05,-1.704196691594e-20,1.383289118805e-05,5.466384948953e-06,
        -2.383598453726e-21,-4.22048028386e-07,-1.097288994074e-07
};

lp_filter::lp_filter() : _empty{ true }, _cursor{ 0 }, _circular{} { }

sink<1> &lp_filter::operator<<(const arr_t<1> &r) {
    if (_empty) {
        for (auto &v : _circular)
            v = r[0];
        _empty = false;
        _cursor++;
    } else {
        _circular[_cursor++] = r[0];
        _cursor %= _order + 1;
    }
    return *this;
}

source<1> &lp_filter::operator>>(arr_t<1> &r) {
    auto t{ 0.0 };
    for (size_t i{ 0 }; i <= _order; i++) {
        t += lp_b[i];
    }
    r[0] = 0;
    for (size_t i{ 0 }; i <= _order; i++) {
        r[0] += _circular[i] * lp_b[(_order + _cursor - i) % (_order + 1)];
    }
    r[0] /= t;
    return *this;
}

